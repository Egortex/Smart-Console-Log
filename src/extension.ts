import * as vscode from "vscode";

// –§—É–Ω–∫—Ü–∏—è activate –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
export function activate(context: vscode.ExtensionContext) {
	// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã smartConsoleLog.log, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ VS Code
	let disposable = vscode.commands.registerCommand("smartConsoleLog.log", () => {
		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
		const editor = vscode.window.activeTextEditor;
		if (!editor) {
			vscode.window.showErrorMessage("No active editor");
			return;
		}

		// –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—Å–∞–Ω –∫–æ–¥
		const document = editor.document;
		const languageId = document.languageId;

		// –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
		const supported = [
			"typescript",
			"javascript",
			"typescriptreact",
			"javascriptreact",
			"python",
			"php",
			"java",
			"csharp",
			"ruby",
			"go",
			"c",
			"cpp",
			"vue",
		];

		// –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
		if (!supported.includes(languageId)) {
			vscode.window.showErrorMessage(`Language ${languageId} not supported`);
			return;
		}

		// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
		const config = vscode.workspace.getConfiguration("smartConsoleLog");
		const insertAfterBlock = config.get<boolean>("insertAfterBlock", true);
		const templates = config.get<Record<string, string>>("templates", {});

		// –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
		const selection = editor.selection;
		const selectedText = document.getText(selection).trim();

		// –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		if (!selectedText) {
			vscode.window.showInformationMessage("Please select a variable to log.");
			return;
		}

		// –ü—Ä–æ—Å—Ç–µ–π—à–∏–π –ø–æ–∏—Å–∫ –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å–∞ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
		const position = selection.active;
		const textBeforeCursor = document.getText(
			new vscode.Range(new vscode.Position(0, 0), position),
		);

		let functionName = "";
		let className = "";
		// –î–ª—è python, js/ts, php, java, csharp –∏ –ø—Ä. –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—â–∏–π –ø–æ–∏—Å–∫

		// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∫–ª–∞—Å—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
		if (languageId === "python") {
			const pyFuncMatch = textBeforeCursor.match(/def\s+([a-zA-Z0-9_]+)/g);
			functionName = pyFuncMatch
				? pyFuncMatch[pyFuncMatch.length - 1].replace(/def\s+/, "").trim()
				: "";

			const pyClassMatch = textBeforeCursor.match(/class\s+([a-zA-Z0-9_]+)/g);
			className = pyClassMatch
				? pyClassMatch[pyClassMatch.length - 1].replace(/class\s+/, "").trim()
				: "";
		} else if (languageId === "php") {
			const phpFuncMatch = textBeforeCursor.match(/function\s+([a-zA-Z0-9_]+)/g);
			functionName = phpFuncMatch
				? phpFuncMatch[phpFuncMatch.length - 1].replace(/function\s+/, "").trim()
				: "";

			const phpClassMatch = textBeforeCursor.match(/class\s+([a-zA-Z0-9_]+)/g);
			className = phpClassMatch
				? phpClassMatch[phpClassMatch.length - 1].replace(/class\s+/, "").trim()
				: "";
		} else if (languageId === "java" || languageId === "csharp") {
			const javaFuncMatch = textBeforeCursor.match(
				/(?:public|private|protected)?\s*(?:static)?\s*\w+\s+([a-zA-Z0-9_]+)\s*\(/g,
			);
			functionName = javaFuncMatch
				? javaFuncMatch[javaFuncMatch.length - 1].replace(/.*\s/, "").replace(/\(.*/, "").trim()
				: "";

			const javaClassMatch = textBeforeCursor.match(/class\s+([a-zA-Z0-9_]+)/g);
			className = javaClassMatch
				? javaClassMatch[javaClassMatch.length - 1].replace(/class\s+/, "").trim()
				: "";
		} else if (languageId === "ruby") {
			// ‚úÖ Ruby
			const rubyFuncMatch = textBeforeCursor.match(/def\s+([a-zA-Z0-9_]+)/g);
			functionName = rubyFuncMatch
				? rubyFuncMatch[rubyFuncMatch.length - 1].replace(/def\s+/, "").trim()
				: "";

			const rubyClassMatch = textBeforeCursor.match(/class\s+([a-zA-Z0-9_:]+)/g);
			className = rubyClassMatch
				? rubyClassMatch[rubyClassMatch.length - 1].replace(/class\s+/, "").trim()
				: "";
		} else if (languageId === "go") {
			// ‚úÖ Go
			const goFuncMatch = textBeforeCursor.match(/func\s+\(*\s*[a-z]*\s*\)*\s*([a-zA-Z0-9_]+)/g);
			functionName = goFuncMatch
				? goFuncMatch[goFuncMatch.length - 1].replace(/func.*?/g, "").trim()
				: "";

			// –í Go –Ω–µ—Ç –∫–ª–∞—Å—Å–æ–≤, –Ω–æ –µ—Å—Ç—å —Ç–∏–ø—ã
			const goTypeMatch = textBeforeCursor.match(/type\s+([a-zA-Z0-9_]+)\s+struct/g);
			className = goTypeMatch
				? goTypeMatch[goTypeMatch.length - 1].replace(/type\s+/, "").trim()
				: "";
		} else if (languageId === "c" || languageId === "cpp") {
			// ‚úÖ C / C++
			const cFuncMatch = textBeforeCursor.match(/(\w+)\s+\*?\s*\([^\)]*\)/); // –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏
			functionName = cFuncMatch ? cFuncMatch[1] : "";

			if (languageId === "cpp") {
				// C++ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–ª–∞—Å—Å—ã
				const cppClassMatch = textBeforeCursor.match(/class\s+([a-zA-Z0-9_]+)/g);
				className = cppClassMatch
					? cppClassMatch[cppClassMatch.length - 1].replace(/class\s+/, "").trim()
					: "";
			}
		} else {
			const jsFuncMatch =
				textBeforeCursor.match(/function\s+([a-zA-Z0-9_]+)/g) ||
				textBeforeCursor.match(/([a-zA-Z0-9_]+)\s*=\s*\(/g) ||
				textBeforeCursor.match(/([a-zA-Z0-9_]+)\s*:\s*\(/g) ||
				textBeforeCursor.match(/([a-zA-Z_$][a-zA-Z0-9_$]*)\s*\(/g) ||
				textBeforeCursor.match(/\{\s*([a-zA-Z_$][a-zA-Z0-9_$]*)\s*\(/g) ||
				textBeforeCursor.match(/(?:static\s+)?([a-zA-Z_$][a-zA-Z0-9_$]*)\s*\(/g) ||
				textBeforeCursor.match(/(?:const|let|var)\s+([a-zA-Z_$][a-zA-Z0-9_$]*)\s*=\s*\(/g) ||
				textBeforeCursor.match(/function\s*/g);

			functionName = jsFuncMatch
				? jsFuncMatch[jsFuncMatch.length - 1]
						.replace(/function\s+/, "")
						.replace(/\s*=\s*\(.*\)\s*=>/, "")
						.replace(/\s*:\s*function/, "")
						.replace(/get\s+/, "")
						.replace(/\s*\(/, "")
						.trim()
				: "";

			const jsClassMatch = textBeforeCursor.match(/class\s+([a-zA-Z0-9_]+)/g);
			className = jsClassMatch
				? jsClassMatch[jsClassMatch.length - 1].replace(/class\s+/, "").trim()
				: "";
		}

		// –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –¥–µ—Ñ–æ–ª—Ç –¥–ª—è JS
		let template = templates[languageId];
		if (!template) {
			template = 'console.log("üöÄ ~ ${className} ~ ${functionName} ~ ${variable}:", ${variable});';
		}
		const lineNumber = position.line + 1; // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (API 0-based)

		// –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —à–∞–±–ª–æ–Ω
		const logStatement = template
			.replace(/\${className}/g, className || "")
			.replace(/\${functionName}/g, functionName || "")
			.replace(/\${lineNumber}/g, String(lineNumber))
			.replace(/\${variable}/g, selectedText);

		// –í—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥ –ø–æ –ø—Ä–∞–≤–∏–ª—É insertAfterBlock
		// –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ –∏–ª–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏
		if (insertAfterBlock) {
			const textAfterCursor = document.getText(
				new vscode.Range(position, document.lineAt(document.lineCount - 1).range.end),
			);

			let blockCloseIndex = -1;
			// –ü–æ–∏—Å–∫ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏ –∏–ª–∏ –∫–æ–Ω—Ü–∞ –±–ª–æ–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
			if (languageId === "python") {
				const currentIndent = document.lineAt(position.line).firstNonWhitespaceCharacterIndex;
				const lines = textAfterCursor.split("\n");
				for (let i = 0; i < lines.length; i++) {
					const line = lines[i];
					if (line.trim() === "") {
						continue;
					}
					const indent = line.search(/\S/);
					if (indent <= currentIndent) {
						blockCloseIndex = i;
						break;
					}
				}
			} else {
				blockCloseIndex = textAfterCursor.indexOf("}");
			}

			// –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
			if (blockCloseIndex === -1) {
				vscode.window.showWarningMessage(
					"Couldn't find a block end. Inserting after current line.",
				);
				editor.edit((editBuilder) => {
					editBuilder.insert(new vscode.Position(position.line + 1, 0), logStatement + "\n");
				});
				return;
			}

			// –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤—Å—Ç–∞–≤–∫–∏
			let insertPos: vscode.Position;
			if (languageId === "python") {
				insertPos = new vscode.Position(position.line + blockCloseIndex + 1, 0);
			} else {
				const bracketPosition = document.positionAt(document.offsetAt(position) + blockCloseIndex);
				insertPos = new vscode.Position(bracketPosition.line + 1, 0);
			}
			// –í—Å—Ç–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ

			editor.edit((editBuilder) => {
				editBuilder.insert(insertPos, logStatement + "\n");
			});
		} else {
			// –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
			const insertPos = new vscode.Position(position.line + 1, 0);
			editor.edit((editBuilder) => {
				editBuilder.insert(insertPos, logStatement + "\n");
			});
		}
	});

	context.subscriptions.push(disposable);
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –≤—Å—Ç–∞–≤–∫–∏ –ª–æ–≥–∞ –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
 */
function insertLogAfterCurrentLine(editor: vscode.TextEditor, line: number, logStatement: string) {
	const insertPos = new vscode.Position(line + 1, 0);
	editor.edit((editBuilder) => {
		editBuilder.insert(insertPos, logStatement + "\n");
	});
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç "—É–º–Ω—É—é" –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ª–æ–≥–∞: –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ –∫–æ–¥–∞.
 * @returns vscode.Position –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ null, –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –ø–æ–∑–∏—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
 */
function findSmartInsertPosition(
	document: vscode.TextDocument,
	position: vscode.Position,
	languageId: string,
): vscode.Position | null {
	const currentLine = document.lineAt(position.line);

	// –î–ª—è —è–∑—ã–∫–æ–≤ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏, –∫–∞–∫ Python
	if (languageId === "python") {
		const currentIndent = currentLine.firstNonWhitespaceCharacterIndex;

		for (let lineNum = position.line + 1; lineNum < document.lineCount; lineNum++) {
			const line = document.lineAt(lineNum);
			if (line.isEmptyOrWhitespace) {
				continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
			}

			const lineIndent = line.firstNonWhitespaceCharacterIndex;
			// –ï—Å–ª–∏ –º—ã –Ω–∞—à–ª–∏ —Å—Ç—Ä–æ–∫—É —Å –º–µ–Ω—å—à–∏–º –∏–ª–∏ —Ç–∞–∫–∏–º –∂–µ –æ—Ç—Å—Ç—É–ø–æ–º,
			// —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞. –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.
			if (lineIndent <= currentIndent) {
				return new vscode.Position(lineNum, 0);
			}
		}
		// –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Ñ–∞–π–ª–∞, –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –∫–æ–Ω–µ—Ü –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞
		return document.lineAt(document.lineCount - 1).range.end;
	}

	// –î–ª—è —è–∑—ã–∫–æ–≤ —Å–æ —Å–∫–æ–±–∫–∞–º–∏ (JS, TS, C#, Java –∏ —Ç.–¥.)
	let braceBalance = 0;
	let foundFirstBrace = false;
	const startOffset = document.offsetAt(currentLine.range.start);

	for (let offset = startOffset; offset < document.getText().length; offset++) {
		const char = document.getText(
			new vscode.Range(document.positionAt(offset), document.positionAt(offset + 1)),
		);

		if (char === "{") {
			if (!foundFirstBrace) {
				// –ù–∞—á–∏–Ω–∞–µ–º —Å—á–∏—Ç–∞—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
				// –Ω–∞ —É—Ä–æ–≤–Ω–µ –∫—É—Ä—Å–æ—Ä–∞ –∏–ª–∏ –≥–ª—É–±–∂–µ.
				if (offset >= document.offsetAt(position)) {
					foundFirstBrace = true;
					braceBalance = 1;
				}
			} else {
				braceBalance++;
			}
		} else if (char === "}") {
			if (foundFirstBrace) {
				braceBalance--;

				// –ö–æ–≥–¥–∞ –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∏–≥ –Ω—É–ª—è, –º—ã –Ω–∞—à–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –Ω–∞—à–µ–≥–æ –±–ª–æ–∫–∞.
				if (braceBalance === 0) {
					const bracePosition = document.positionAt(offset);
					// –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞.
					return new vscode.Position(bracePosition.line, 0);
				}
			}
		}
	}

	return null; // –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –º–µ—Å—Ç–æ
}

export function deactivate() {}
